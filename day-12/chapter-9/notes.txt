// Regular Expressions
/* Regular Expression is a tool used in not only javascript but many other programming languages and its is basically a way to describe patterns in string data */

// Creating a regular expression

// A regular expression is a type of OBJECT. (because it behaves kind of like a constructor in a class)
//  It can be constructed by either using the RegExp() method or enclosing the code in backslashes /"code"/

* Limits of the Hyphen (-) in Character Classes:
Used to Define Ranges:
When placed between two characters, the hyphen (-) is used to define a range. For example:
[a-z] matches any lowercase letter.
[A-Z] matches any uppercase letter.
[0-9] matches any digit from 0 to 9.
Position Matters:
If you place the hyphen (-) at the start or end of a character class, it is treated as a literal hyphen and no longer defines a range:
[-a-z] matches - and any lowercase letter.
[a-z-] matches any lowercase letter and -.
Range Must Be Valid:
The characters in a range must follow a logical order. For example, [A-z] is technically valid, but it includes extra characters between Z and a in the ASCII table, which may lead to unexpected matches.
The range [A-z] would match not only A-Z and a-z, but also symbols like [ and \ (based on ASCII values).
What doesn't the hyphen work for?
Non-Ordered Characters:
For non-alphabetic or non-numeric ranges, hyphens don’t work. For example, [z-a] will not work because it’s not a valid range (the characters go in the reverse order).
When Outside of Character Classes:
Outside of square brackets, the hyphen is interpreted as a literal character, not a range. For instance, /0-9/ would match the exact sequence 0-9 in a string, not the range of digits. */

// SPECIAL REGEX CHARACTER SHORTCUTS
/*Used to match:
 \d Any digit character
\w An alphanumeric character (“word character”)
\s Any whitespace character (space, tab, newline, and similar)
\D A character that is not a digit
\W A nonalphanumeric character
\S A nonwhitespace character
. Any character except for newline 
^ - ANCHOR/CARET: which checks majorly the first character that matches the condition
\p{L} Any letter
\p{N} Any numeric character
\p{P} Any punctuation character
\P{L} Any nonletter (uppercase P inverts)
\p{Script=Hangul} Any character from the given script
*/

* You could match a date and time format like 01-30-2003 15:20 with
the following expression:
let dateTime = /\d\d-\d\d-\d\d\d\d \d\d:\d\d/;
console.log(dateTime.test("01-30-2003 15:20"));

When you put a plus sign (+) after something in a regular expression, it indicates that the element may be repeated more than once

The star (*) has a similar meaning but also allows the pattern to match zero times (ie it behaves like a do while loop which will log once if the condition is false)

A question mark (?) makes a part of a pattern optional, meaning
it may occur zero times or one time. In the following example, the u character is allowed to occur, but the pattern also matches when it is missing: usually just for the character immediately before the "?" sign

ome operating systems, however, use not just a newline character
to separate lines but a carriage return character followed by a newline
("\r\n")

The regex /x+?/ is a combination of the quantifier + and the lazy quantifier ?.

x+: This matches one or more occurrences of the character x. In regex, the + quantifier means "match 1 or more of the preceding token."

+? (Lazy vs. Greedy Matching): Normally, regex quantifiers like + are greedy, meaning they match as much as possible. However, when you follow the + with a ?, it becomes non-greedy (also called "lazy"). This tells the regex engine to match as little as possible—that is, the smallest number of x characters that still make the pattern valid.

In essence:
/x+/ (greedy) will try to match as many xs as possible.
/x+?/ (lazy/non-greedy) will try to match the fewest number of xs possible.
Example:
If you have the string "xxxy", then:

/x+/ will match all three x characters ("xxx").
/x+?/ will match only the first x.

SUMMARY 

abc/ A sequence of characters
/[abc]/ Any character from a set of characters
/[^abc]/ Any character not in a set of characters
/[0-9]/ Any character in a range of characters
/x+/ One or more occurrences of the pattern x
/x+?/ One or more occurrences, nongreedy
/x*/ Zero or more occurrences
/x?/ Zero or one occurrence
/x{2,4}/ Two to four occurrences
/(abc)/ A group
/a|b|c/ Any one of several patterns
/\d/ Any digit character
/\w/ An alphanumeric character (“word character”)
/\s/ Any whitespace character
/./ Any character except newlines
/\p{L}/u Any letter character
/^/ Start of input
/$/ End of input
/(?=a)/ A look-ahead test

The regex /\(?=a\)/ represents a lookahead assertion. In regex, lookaheads allow you to check if a certain pattern exists ahead of the current position in the string, without consuming any characters.

Explanation of /\(?=a\)/:
(?=a): This is the actual lookahead assertion. It checks if the character a is immediately ahead of the current position in the string, but does not consume the character. In other words, it "looks" for a without including it in the match.
The parentheses () are used to group the lookahead together, making it a single unit.
Lookahead assertions are zero-width assertions, meaning they don't actually match or consume any part of the string—they just test a condition.
Example:
If you have the string "abc", and you use this regex:

console.log(/(?=a)/.test("abc")); 
This will return true because the lookahead successfully finds a at the start, but it does not consume the a.

Use Case:
Lookaheads are useful when you want to ensure that a specific character or pattern exists ahead in the string, but you don't want to include it in your final match result.

Example in Practice

let str = "abcde";
console.log(str.match(/b(?=c)/));  // Returns ["b"]
Here, b(?=c) matches the b only if it is followed by c. However, only the b is returned as the match result; the c is just tested, not included.

A regular expression has a method test to test whether a given string
matches it. It also has a method exec that, when a match is found,
returns an array containing all matched groups. Such an array has an
index property that indicates where the match started.
Strings have a match method to match them against a regular expres-
sion and a search method to search for one, returning only the starting
position of the match. Their replace method can replace matches of a
pattern with a replacement string or function.

Regular expressions can have options, which are written after the
closing slash. The i option makes the match case insensitive. The g
option makes the expression global, which, among other things, causes
the replace method to replace all instances instead of just the first.
The y option makes and expression sticky, which means that it will not
search ahead and skip part of the string when looking for a match. The
u option turns on Unicode mode, which enables \p syntax and fixes a
number of problems around the handling of characters that take up two
code units.